package examples;

import java.io.File;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Locale;
import java.util.Map;

import io.github.defective4.dsp.vcd4j.data.BinaryChangeEntry;
import io.github.defective4.dsp.vcd4j.data.ChangeEntry;
import io.github.defective4.dsp.vcd4j.data.MultibitChangeEntry;
import io.github.defective4.dsp.vcd4j.data.Scope;
import io.github.defective4.dsp.vcd4j.data.State;
import io.github.defective4.dsp.vcd4j.data.TimeScale;
import io.github.defective4.dsp.vcd4j.data.TimeScale.TimeScaleUnit;
import io.github.defective4.dsp.vcd4j.data.VCD;
import io.github.defective4.dsp.vcd4j.data.VariableDefinition;
import io.github.defective4.dsp.vcd4j.data.VariableDefinition.Type;
import io.github.defective4.dsp.vcd4j.file.VCDWriter;

public class VCDWriterExample {
    public static void main(String[] args) {
        try {

            String version = "VCD4J";
            String comment = "Example file generated by VCD4J";
            String date = new SimpleDateFormat("LLLL dd, yyyy", Locale.ENGLISH)
                    .format(new Date(System.currentTimeMillis()));

            TimeScale timeScale = new TimeScale(TimeScaleUnit.MILLISECOND, 1); // Timescale is 1ms

            Map<String, VariableDefinition> variableDefinitions = new HashMap<>();
            // The map key and variable key have to be the same
            VariableDefinition signalVar = new VariableDefinition(".", Type.WIRE, 1, "signal");
            VariableDefinition voltageVar = new VariableDefinition(",", Type.WIRE, 8, "voltage");

            variableDefinitions.put(".", signalVar);
            variableDefinitions.put(",", voltageVar);

            Map<Long, List<ChangeEntry<?>>> valueChanges = new HashMap<>();

            // Make signal and voltage variables undefined until 1000ms pass
            valueChanges
                    .put(1000l,
                            VCD
                                    .makeChangeEntriesList(new BinaryChangeEntry(signalVar, State.UNDEFINED),
                                            new MultibitChangeEntry(voltageVar, MultibitChangeEntry.UNDEFINED)));

            // Set signal to HIGH, don't change voltage until 2000ms pass
            valueChanges.put(2000l, VCD.makeChangeEntriesList(new BinaryChangeEntry(signalVar, State.HIGH)));

            // Set signal to LOW, set voltage to 12 (0x0C) until 3500ms pass
            valueChanges
                    .put(3500l,
                            VCD
                                    .makeChangeEntriesList(new BinaryChangeEntry(signalVar, State.LOW),
                                            new MultibitChangeEntry(voltageVar, 12)));

            // Finally, save the VCD file
            File vcdFile = new File("output.vcd");
            VCD vcd = new VCD(date, version, comment, new Scope(Scope.Type.MODULE, "Example"), timeScale, valueChanges,
                    variableDefinitions);
            VCDWriter.write(vcd, vcdFile);
            System.err.println("VCD saved to " + vcdFile);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }
}
